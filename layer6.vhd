library ieee;
use ieee.std_logic_1164.all;

entity layer6 is
port ( 
       clk : in std_logic;
       Layer6_input : in std_logic_vector(511 downto 0);
       Layer6_output : out std_logic_vector(255 downto 0)
       );
end entity;
    
architecture structure of layer6 is 

component Neu_Ron is 
generic( N : integer := 4);
port ( clk : in std_logic; 
       inputs : in std_logic_vector( ((N*16)-1) downto 0);
       weights : in std_logic_vector( ((N*16)-1) downto 0);
       Bias : in std_logic_vector(15 downto 0);
       weighted_sum : out std_logic_vector(15 downto 0);
       neuron_output :out  std_logic_vector(15 downto 0)
      );
end component;

type weight_array is array (0 to 15) of std_logic_vector(511 downto 0);
signal weight : weight_array := (


("00110011101010101011010010110111101010100100010110110100111001111010111010011001001100110110000010101010111000100011010100010110001010011000010100110001001110001011010100000111101011011111110100110100111010000010010101010100001101000000100110110010010101011010111110000000001100001011011100110010100101111010011000010000001101000111110000101011110111101011001111011110001100101010101100100101000100110011010000110110001100001000111010110100110010010010111110000110001010000001001010110001111010110011010111000110"),





("10110101110000100011000110110110001100011101110100101111100011111011010000100111001101000100100110110011011010111010110100000011001100101000010110101110110010010010010010101000101101011001000100100001011101100011000000000110101011111010111110110100101111011011010010110011001100101110001010110011111010011011001111000111101101011100000100101111000000000011001110000110001100010000000110101100111111000011001100011110001100100011100110110000101110000010110100010011001011000100000010110000010100010010111011110111"),


("00110000100110011010000000011110101100101000000000101001111100111010010001100100001010101011100000110010000110111011001110000011101101000111110100110010100111011011010110100001101100000000101010101010000111001011010000111001101011110101010000101100000110101011000110011100001101101001101110101111101001001011000010101101001101000010010110110010011000011010100100000110101100011110010010110100001000100011010011011011101100011110010010101101000100101011001001110000101100011011101000110100000011010011010110011010"),




 );

 TYPE fixed_point_array IS ARRAY (natural RANGE <>) OF std_logic_vector(15 downto 0);                                  
 constant bias_array : fixed_point_array(0 to 15):=  ("0001010011111011","0001110111000101","0010010010100011","0010010000100111","0010001000010001","0000100011111101","0001110010111000","0010010000010000","0010010011011100","0001010001010011","1001000011100111","1001010011110010","0001011010010110","0010001001110110","1010000010110110","1001000100011001"
);

 signal  reg_Layer6out : fixed_point_array(0 to 15);
 signal weighted_sum_array : fixed_point_array(0 to 15);
 
 
 
begin

  gen_neurons: for i in 0 to 15 generate
    N: Neu_Ron generic map (N => 32) 
    port map(
      clk => clk,
      inputs => layer6_input, 
      weights => weight(i), 
      Bias => bias_array(i), 
      weighted_sum => weighted_sum_array(i), 
      neuron_output => reg_Layer6out(i)
    );
  end generate;

  -- Update output
  process(clk)
  begin
    if rising_edge(clk) then
      Layer6_output <=   reg_Layer6out(0)  & reg_Layer6out(1)  & reg_Layer6out(2)  & reg_Layer6out(3)  & reg_Layer6out(4)  & reg_Layer6out(5)  & reg_Layer6out(6)  & reg_Layer6out(7)  & reg_Layer6out(8) & reg_Layer6out(9)& reg_Layer6out(10) & reg_Layer6out(11) & reg_Layer6out(12) & reg_Layer6out(13) 
                       & reg_Layer6out(14) & reg_Layer6out(15);   
     end if;
  end process;

end architecture structure ;
