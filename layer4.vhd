library ieee;
use ieee.std_logic_1164.all;

entity layer4 is
port ( 
       clk : in std_logic;
       Layer4_input : in std_logic_vector(511 downto 0);
       Layer4_output : out std_logic_vector(255 downto 0)
       );
end entity;
    
architecture structure of layer4 is 

component Neu_Ron is 
generic( N : integer := 4);
port ( clk : in std_logic; 
       inputs : in std_logic_vector( ((N*16)-1) downto 0);
       weights : in std_logic_vector( ((N*16)-1) downto 0);
       Bias : in std_logic_vector(15 downto 0);
       weighted_sum : out std_logic_vector(15 downto 0);
       neuron_output :out  std_logic_vector(15 downto 0)
      );
end component;

type weight_array is array (0 to 15) of std_logic_vector(511 downto 0);
signal weight : weight_array := (

















 );

 TYPE fixed_point_array IS ARRAY (natural RANGE <>) OF std_logic_vector(15 downto 0);                                  
 constant bias_array : fixed_point_array(0 to 15):=  ("1001110011010011","0010010010000000","0010010010011100","0010001100011011","0010010111011000","0010001101001110","1010100010111111","0010100101101111","1001001000111110","0010011101001001","0001111110000001","0010100100100001","0010010011011000","0010011100000000","0010011100111110","1001010100001111");
 signal  reg_Layer4out : fixed_point_array(0 to 15);
 signal weighted_sum_array : fixed_point_array(0 to 15);
 
 
 
begin

  gen_neurons1: for i in 0 to 7 generate
    N: Neu_Ron generic map (N => 32) 
    port map(
      clk => clk,
      inputs => layer4_input, 
      weights => weight(i), 
      Bias => bias_array(i), 
      weighted_sum => weighted_sum_array(i), 
      neuron_output => reg_Layer4out(i)
    );
  end generate;

  gen_neurons2: for i in 8 to 15 generate
    N: Neu_Ron generic map (N => 32) 
    port map(
      clk => clk,
      inputs => layer4_input, 
      weights => weight(i), 
      Bias => bias_array(i), 
      weighted_sum => weighted_sum_array(i), 
      neuron_output => reg_Layer4out(i)
    );
  end generate;
  -- Update output
  process(clk)
  begin
    if rising_edge(clk) then
      Layer4_output <=  reg_Layer4out(0)  & reg_Layer4out(1)  & reg_Layer4out(2)  & reg_Layer4out(3)  & reg_Layer4out(4)  & reg_Layer4out(5)  & reg_Layer4out(6)  & reg_Layer4out(7)  & reg_Layer4out(8) & reg_Layer4out(9)& reg_Layer4out(10) & reg_Layer4out(11) & reg_Layer4out(12) & reg_Layer4out(13) 
                       & reg_Layer4out(14) & reg_Layer4out(15);    
     end if;
  end process;

end architecture structure ;
